"use strict";(self.webpackChunknvchad_site=self.webpackChunknvchad_site||[]).push([[180],{3905:function(n,e,t){t.d(e,{Zo:function(){return u},kt:function(){return f}});var r=t(7294);function i(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function a(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,r)}return t}function o(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?a(Object(t),!0).forEach((function(e){i(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function c(n,e){if(null==n)return{};var t,r,i=function(n,e){if(null==n)return{};var t,r,i={},a=Object.keys(n);for(r=0;r<a.length;r++)t=a[r],e.indexOf(t)>=0||(i[t]=n[t]);return i}(n,e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(n);for(r=0;r<a.length;r++)t=a[r],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(i[t]=n[t])}return i}var p=r.createContext({}),l=function(n){var e=r.useContext(p),t=e;return n&&(t="function"==typeof n?n(e):o(o({},e),n)),t},u=function(n){var e=l(n.components);return r.createElement(p.Provider,{value:e},n.children)},s={inlineCode:"code",wrapper:function(n){var e=n.children;return r.createElement(r.Fragment,{},e)}},m=r.forwardRef((function(n,e){var t=n.components,i=n.mdxType,a=n.originalType,p=n.parentName,u=c(n,["components","mdxType","originalType","parentName"]),m=l(t),f=i,d=m["".concat(p,".").concat(f)]||m[f]||s[f]||a;return t?r.createElement(d,o(o({ref:e},u),{},{components:t})):r.createElement(d,o({ref:e},u))}));function f(n,e){var t=arguments,i=e&&e.mdxType;if("string"==typeof n||i){var a=t.length,o=new Array(a);o[0]=m;var c={};for(var p in e)hasOwnProperty.call(e,p)&&(c[p]=e[p]);c.originalType=n,c.mdxType="string"==typeof n?n:i,o[1]=c;for(var l=2;l<a;l++)o[l]=t[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},1038:function(n,e,t){t.r(e),t.d(e,{frontMatter:function(){return c},contentTitle:function(){return p},metadata:function(){return l},toc:function(){return u},default:function(){return m}});var r=t(7462),i=t(3366),a=(t(7294),t(3905)),o=["components"],c={},p=void 0,l={unversionedId:"config/Autocompletion",id:"config/Autocompletion",isDocsHomePage:!1,title:"Autocompletion",description:"- Due to some reasons we cant include autocomplete plugins by default, for example many use cmp lazy loaded at insertEnter while some dont. Having to add extra code for such user cases broke the config many a times.",source:"@site/docs/config/Autocompletion.md",sourceDirName:"config",slug:"/config/Autocompletion",permalink:"/config/Autocompletion",version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Lsp stuff",permalink:"/config/Lsp stuff"},next:{title:"Format & lint",permalink:"/config/Format & lint"}},u=[{value:"Install",id:"install",children:[]},{value:"Config",id:"config",children:[]}],s={toc:u};function m(n){var e=n.components,t=(0,i.Z)(n,o);return(0,a.kt)("wrapper",(0,r.Z)({},s,t,{components:e,mdxType:"MDXLayout"}),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Due to some reasons we cant include autocomplete plugins by default, for example many use cmp lazy loaded at insertEnter while some dont. Having to add extra code for such user cases broke the config many a times. ")),(0,a.kt)("h2",{id:"install"},"Install"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"cmp and related plugins for snippets")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'   -- load luasnips + cmp related in insert mode only\n    use {\n      "rafamadriz/friendly-snippets",\n      event = "InsertEnter",\n   }\n\n   use {\n      "hrsh7th/nvim-cmp",\n      after = "friendly-snippets",\n      config = function()\n         require "custom.plugins.cmp"\n      end,\n   }\n\n   use {\n      "L3MON4D3/LuaSnip",\n      wants = "friendly-snippets",\n      after = "nvim-cmp",\n      config = function()\n         local luasnip = require "luasnip"\n         luasnip.config.set_config {\n            history = true,\n            updateevents = "TextChanged,TextChangedI",\n         }\n         require("luasnip/loaders/from_vscode").load()\n      end,\n   }\n\n   use {\n      "saadparwaiz1/cmp_luasnip",\n      after = "LuaSnip",\n   }\n\n   use {\n      "hrsh7th/cmp-nvim-lua",\n      after = "cmp_luasnip",\n   }\n\n   use {\n      "hrsh7th/cmp-nvim-lsp",\n      after = "cmp-nvim-lua",\n   }\n\n   use {\n      "hrsh7th/cmp-buffer",\n      after = "cmp-nvim-lsp",\n   }\n\n   use {\n      "hrsh7th/cmp-path",\n      after = "cmp-buffer",\n   }\n\n   use {\n      "windwp/nvim-autopairs",\n      after = "nvim-cmp",\n      config = function()\n         local autopairs = require "nvim-autopairs"\n         local cmp_autopairs = require "nvim-autopairs.completion.cmp"\n\n         autopairs.setup { fast_wrap = {} }\n\n         local cmp = require "cmp"\n         cmp.event:on("confirm_done", cmp_autopairs.on_confirm_done())\n      end,\n   }\n')),(0,a.kt)("h2",{id:"config"},"Config"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"custom/plugins/cmp.lua be like ")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'local cmp = require "cmp"\n\nvim.opt.completeopt = "menuone,noselect"\n\ncmp.setup {\n   snippet = {\n      expand = function(args)\n         require("luasnip").lsp_expand(args.body)\n      end,\n   },\n   formatting = {\n      format = function(entry, vim_item)\n         local icons = require "plugins.configs.lspkind_icons"\n         vim_item.kind = string.format("%s %s", icons[vim_item.kind], vim_item.kind)\n\n         vim_item.menu = ({\n            nvim_lsp = "[LSP]",\n            nvim_lua = "[Lua]",\n            buffer = "[BUF]",\n         })[entry.source.name]\n\n         return vim_item\n      end,\n   },\n   mapping = {\n      ["<C-p>"] = cmp.mapping.select_prev_item(),\n      ["<C-n>"] = cmp.mapping.select_next_item(),\n      ["<C-d>"] = cmp.mapping.scroll_docs(-4),\n      ["<C-f>"] = cmp.mapping.scroll_docs(4),\n      ["<C-Space>"] = cmp.mapping.complete(),\n      ["<C-e>"] = cmp.mapping.close(),\n      ["<CR>"] = cmp.mapping.confirm {\n         behavior = cmp.ConfirmBehavior.Replace,\n         select = true,\n      },\n      ["<Tab>"] = function(fallback)\n         if cmp.visible() then\n            cmp.select_next_item()\n         elseif require("luasnip").expand_or_jumpable() then\n            vim.fn.feedkeys(vim.api.nvim_replace_termcodes("<Plug>luasnip-expand-or-jump", true, true, true), "")\n         else\n            fallback()\n         end\n      end,\n      ["<S-Tab>"] = function(fallback)\n         if cmp.visible() then\n            cmp.select_prev_item()\n         elseif require("luasnip").jumpable(-1) then\n            vim.fn.feedkeys(vim.api.nvim_replace_termcodes("<Plug>luasnip-jump-prev", true, true, true), "")\n         else\n            fallback()\n         end\n      end,\n   },\n   sources = {\n      { name = "nvim_lsp" },\n      { name = "luasnip" },\n      { name = "buffer" },\n      { name = "nvim_lua" },\n      { name = "path" },\n   },\n}\n')))}m.isMDXComponent=!0}}]);