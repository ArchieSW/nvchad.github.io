"use strict";(self.webpackChunknvchad_site=self.webpackChunknvchad_site||[]).push([[344],{3905:function(e,n,t){t.d(n,{Zo:function(){return c},kt:function(){return d}});var a=t(7294);function l(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function u(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){l(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function r(e,n){if(null==e)return{};var t,a,l=function(e,n){if(null==e)return{};var t,a,l={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(l[t]=e[t]);return l}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(l[t]=e[t])}return l}var o=a.createContext({}),s=function(e){var n=a.useContext(o),t=n;return e&&(t="function"==typeof e?e(n):u(u({},n),e)),t},c=function(e){var n=s(e.components);return a.createElement(o.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,l=e.mdxType,i=e.originalType,o=e.parentName,c=r(e,["components","mdxType","originalType","parentName"]),m=s(t),d=l,g=m["".concat(o,".").concat(d)]||m[d]||p[d]||i;return t?a.createElement(g,u(u({ref:n},c),{},{components:t})):a.createElement(g,u({ref:n},c))}));function d(e,n){var t=arguments,l=n&&n.mdxType;if("string"==typeof e||l){var i=t.length,u=new Array(i);u[0]=m;var r={};for(var o in n)hasOwnProperty.call(n,o)&&(r[o]=n[o]);r.originalType=e,r.mdxType="string"==typeof e?e:l,u[1]=r;for(var s=2;s<i;s++)u[s]=t[s];return a.createElement.apply(null,u)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},3515:function(e,n,t){t.r(n),t.d(n,{contentTitle:function(){return o},default:function(){return m},frontMatter:function(){return r},metadata:function(){return s},toc:function(){return c}});var a=t(7462),l=t(3366),i=(t(7294),t(3905)),u=["components"],r={},o=void 0,s={unversionedId:"config/Custom config",id:"config/Custom config",isDocsHomePage:!1,title:"Custom config",description:"Make your own config :",source:"@site/docs/config/Custom config.md",sourceDirName:"config",slug:"/config/Custom config",permalink:"/config/Custom config",version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Nvim lua stuff",permalink:"/config/Nvim lua stuff"},next:{title:"Lsp stuff",permalink:"/config/Lsp stuff"}},c=[{value:"Make your own config :",id:"make-your-own-config-",children:[{value:"Change default options",id:"change-default-options",children:[]},{value:"Add plugins",id:"add-plugins",children:[]},{value:"Mappings",id:"mappings",children:[]},{value:"Replace default config of a plugin",id:"replace-default-config-of-a-plugin",children:[]},{value:"Override default config of a plugin",id:"override-default-config-of-a-plugin",children:[]},{value:"Override default highlights",id:"override-default-highlights",children:[]},{value:"Custom theme",id:"custom-theme",children:[]},{value:"Remove plugins",id:"remove-plugins",children:[]},{value:"Modify plugin definition options",id:"modify-plugin-definition-options",children:[]},{value:"Autocmds",id:"autocmds",children:[]},{value:"Files to edit",id:"files-to-edit",children:[]},{value:"Lazy loading",id:"lazy-loading",children:[]}]}],p={toc:c};function m(e){var n=e.components,t=(0,l.Z)(e,u);return(0,i.kt)("wrapper",(0,a.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"make-your-own-config-"},"Make your own config :"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Create custom folder in lua/"),(0,i.kt)("li",{parentName:"ul"},"Copy the /examples dir files in this custom dir."),(0,i.kt)("li",{parentName:"ul"},"Check siduck's ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/siduck/dotfiles/tree/master/nvchad/custom"},"custom config")," as an reference!"),(0,i.kt)("li",{parentName:"ul"},"Below are just examples bruhh")),(0,i.kt)("h3",{id:"change-default-options"},"Change default options"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"For example to change cmdheight")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"file method :"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},'-- chadrc\n\nM.options = {\n   path = "custom.options"\n}\n\n\n-- custom.options \nvim.opt.cmdheight = 5\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"function method :")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},'M.options = {\n   path = {"custom", "options"} \n\n   -- argument 1 is the path to the file\n   -- argument 2 is the function name\n\n   -- soo require("custom").options()\n   -- noting that the options function exists in lua/custom/init.lua\n}\n')),(0,i.kt)("h3",{id:"add-plugins"},"Add plugins"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},'-- custom/plugins/init.lua\n\nreturn {\n\n   ["elkowar/yuck.vim"] = { ft = "yuck" }\n\n    ["NvChad/nvterm"] = {\n      config = function()\n         require "plugins.configs.nvterm"\n      end,\n   },\n}\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"you can use a table too or just link the path of your table to organize config clean!")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},'-- chadrc.lua\n\nlocal userPlugins = require "custom.plugins"\n\nM.plugins = {\n   user = userPlugins\n}\n')),(0,i.kt)("h3",{id:"mappings"},"Mappings"),(0,i.kt)("h4",{id:"add-mappings"},"Add mappings"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"custom/init.lua or any file in custom dir (then load it in custom/init.lua)")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},'local map = require("core.utils").map\n\nmap("n", "<leader>cc", ":Telescope <CR>")\nmap("n", "<leader>q", ":q <CR>")\n')),(0,i.kt)("h4",{id:"change-non-plugin-mapping"},"Change non plugin mapping"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"For example to change :")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},'map("n", "<C-s>", "<cmd> :w <CR>") -- (check mappings.lua first)\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},'local map = require("core.utils").map\n\n-- leader + e is used for nvimtree focus so disable it\nM.mappings = {\n      misc = function()\n         map("n", "<leader>ss", "<cmd> :w <CR>")\n      end\n   },\n}\n')),(0,i.kt)("h4",{id:"change-plugin-mappings"},"Change plugin mappings"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"For example to change :")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},'map("n", "<leader>th", "<cmd> :Telescope themes <CR>")\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},'local map = require("core.utils").map\n\n-- leader + e is used for nvimtree focus so disable it\nM.plugins = {\n  user = {\n       ["nvim-telescope/telescope.nvim"] = {\n          setup = function()\n             map("n", "<leader>ts", "<cmd> :Telescope themes <CR>")\n          end\n     }\n  }\n}\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Note: In the above example you can just make this change in your custom/plugins/init.lua itself! (the user table here is very useful)")),(0,i.kt)("h3",{id:"replace-default-config-of-a-plugin"},"Replace default config of a plugin"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Use the default_plugin_config_replace table in chadrc.lua")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},'M.plugins = {\n   user = {\n      ["NvChad/nvterm"] = {\n         config = function()\n           require "custom.nvterm"  \n         end\n       }\n   },\n}\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Do :PackerSync")),(0,i.kt)("h3",{id:"override-default-config-of-a-plugin"},"Override default config of a plugin"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"This feature comes useful when you want to change one thing from default config of a plugin but not copy paste the whole config!")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},'M.plugins = {\n   override = {\n      ["nvim-treesitter/nvim-treesitter"] = {\n        ensure_installed = {\n          "html",\n          "css",\n       },\n     }\n   }\n}\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Note : the word 'nvim_treesitter' is taken from the override function from /lua/plugins/init.lua's treesitter 'use' table."),(0,i.kt)("li",{parentName:"ul"},"The above method might get messy if you override many plugin configs, so below is a basic example to keep it clean :")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},'local pluginConfs = require "custom.plugins.configs"\n\nM.plugins = {\n   default_plugin_config_replace = {\n      ["nvim-treesitter/nvim-treesitter"] = pluginConfs.treesitter,\n      ["kyazdani42/nvim-tree.lua"] = pluginConfs.nvimtree,\n   },\n}\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},'-- custom/plugins/configs.lua file\n\nlocal M = {}\n\nM.treesitter = {\n   ensure_installed = {\n      "lua",\n      "html",\n      "css",\n   },\n}\n\nM.nvimtree = {\n   git = {\n      enable = true,\n   },\n   view = {\n      side = "right",\n      width = 20,\n   },\n}\n\nreturn M\n')),(0,i.kt)("h3",{id:"override-default-highlights"},"Override default highlights"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Add a path to the 'hl_override' option in the UI section of chadrc.lua.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},'M.ui = {\n   hl_override = "custom.highlights",\n}\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"NOTE : The above path is just an example , which will mean that your highlights file is /custom/highlights.lua."),(0,i.kt)("li",{parentName:"ul"},"highlights file might contain this.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},'local colors = require("colors").get()\n\nlocal fg = require("core.utils").fg\nlocal fg_bg = require("core.utils").fg_bg\nlocal bg = require("core.utils").bg\n\nfg("Normal", colors.red)\n\n-- If you dont want to require the above stuffs then you could just do :\n\nvim.cmd("hi Normal guifg=#yourhexcolor")\n')),(0,i.kt)("h3",{id:"custom-theme"},"Custom theme"),(0,i.kt)("p",null,"Many popular themes are integrated perfectly by default (check them by ",(0,i.kt)("kbd",null,"\\<Leader",">"),"+",(0,i.kt)("kbd",null,"t"),"+",(0,i.kt)("kbd",null,"h")," or ",(0,i.kt)("inlineCode",{parentName:"p"},":Telescope themes"),").\nIf your favorite one is not covered, you could get it by the followings:"),(0,i.kt)("h4",{id:"recommended"},"Recommended"),(0,i.kt)("p",null,"Make a ",(0,i.kt)("a",{parentName:"p",href:"https://nvchad.github.io/contribute#how-to-submit-themes"},"PR")," or open an ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/NvChad/NvChad/issues"},"issue")," for the theme on Github."),(0,i.kt)("h4",{id:"manually"},"Manually"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"add themes as plugins:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},'--  custom/plugins/inited.lua\n\nreturn {\n    { "local/path/to/mytheme" }, -- local\n    { "Iron-E/nvim-highlite" }, -- remote\n}\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"add colors file in format of ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/NvChad/nvim-base16.lua/blob/master/lua/hl_themes/aquarium.lua"},"this")," for ui stuffs:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},'-- custom/colors.lua\n\nreturn {\n    white = "#ced4df",\n    darker_black = "#1a1a24",\n    black = "#20202A", --  nvim bg\n    ...\n}\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"set colors and theme in ",(0,i.kt)("inlineCode",{parentName:"li"},"chadrc.lua"),":")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},'-- custom/chadrc.lua\n\nM.ui = {\n  theme = "mytheme",\n  -- theme = "highlite",\n  colors = "custom.colors",\n}\n')),(0,i.kt)("p",null,"(",(0,i.kt)("em",{parentName:"p"},"Note"),", the compatibility of a custom theme with NvChad is not guaranteed, and potential highlighting issues should be fixed by yourself in ",(0,i.kt)("inlineCode",{parentName:"p"},"hl_override")," or somewhere else)"),(0,i.kt)("h3",{id:"remove-plugins"},"Remove plugins"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},'M.plugins = {\n  user = {\n      ["andymass/vim-matchup"] = {\n          disable = true\n       }\n   }\n}\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Do :PackerSync")),(0,i.kt)("h3",{id:"modify-plugin-definition-options"},"Modify plugin definition options"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"For example this is nvimtree's definition ")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},' ["kyazdani42/nvim-tree.lua"] = {\n      cmd = { "NvimTreeToggle", "NvimTreeFocus" },\n\n      setup = function()\n         require("core.mappings").nvimtree()\n      end,\n\n      config = function()\n         require "plugins.configs.nvimtree"\n      end,\n }\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Now to change cmd, setup or any option defined in it : ")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},'\nM.plugins = {\n  user = {\n      ["kyazdani42/nvim-tree.lua"] = {\n      cmd = { "abc"},\n\n      setup = function()\n         require("core.mappings").yourfile\n      end,\n\n      config = function()\n        your stuff!\n      end,\n   }\n} }\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Do :PackerSync")),(0,i.kt)("h3",{id:"autocmds"},"Autocmds"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"for example you can create a new file called autochad_cmds.lua in the lua/custom folder and require it in lua/custom/init.lua! or just define autocmds in custom/init.lua")),(0,i.kt)("h3",{id:"files-to-edit"},"Files to edit"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Only edit files in custom dir, dont touch anything outside it."),(0,i.kt)("li",{parentName:"ul"},"The rest of the files outside the custom folder will get overwritten when updated using ",(0,i.kt)("inlineCode",{parentName:"li"},"<leader> + uu")," .")),(0,i.kt)("h3",{id:"lazy-loading"},"Lazy loading"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"We lazy load almost 95% of the plugins, so we expect you to lazy load the plugins you've added to reduce startuptime. We don't want users making NvChad slow just because they didn't lazy load plugins they've added!")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Check ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/wbthomason/packer.nvim#specifying-plugins"},"packer's readme")," for more info!"))),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://cdn.discordapp.com/attachments/610012463907209227/891011437810577480/863483056531046450.png",alt:"lessgooo"})),(0,i.kt)("p",null,"(Note : Please open out an ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/NvChad/nvchad.github.io/issues"},"issue")," on the repo if you find any inaccuracies in the docs!)"))}m.isMDXComponent=!0}}]);