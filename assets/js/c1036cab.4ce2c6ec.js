"use strict";(self.webpackChunknvchad_site=self.webpackChunknvchad_site||[]).push([[990],{3905:function(e,t,a){a.d(t,{Zo:function(){return p},kt:function(){return m}});var n=a(7294);function l(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function r(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){l(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,l=function(e,t){if(null==e)return{};var a,n,l={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(l[a]=e[a]);return l}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(l[a]=e[a])}return l}var u=n.createContext({}),s=function(e){var t=n.useContext(u),a=t;return e&&(a="function"==typeof e?e(t):r(r({},t),e)),a},p=function(e){var t=s(e.components);return n.createElement(u.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var a=e.components,l=e.mdxType,i=e.originalType,u=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),h=s(a),m=l,d=h["".concat(u,".").concat(m)]||h[m]||c[m]||i;return a?n.createElement(d,r(r({ref:t},p),{},{components:a})):n.createElement(d,r({ref:t},p))}));function m(e,t){var a=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var i=a.length,r=new Array(i);r[0]=h;var o={};for(var u in t)hasOwnProperty.call(t,u)&&(o[u]=t[u]);o.originalType=e,o.mdxType="string"==typeof e?e:l,r[1]=o;for(var s=2;s<i;s++)r[s]=a[s];return n.createElement.apply(null,r)}return n.createElement.apply(null,a)}h.displayName="MDXCreateElement"},5924:function(e,t,a){a.r(t),a.d(t,{frontMatter:function(){return o},contentTitle:function(){return u},metadata:function(){return s},toc:function(){return p},default:function(){return h}});var n=a(7462),l=a(3366),i=(a(7294),a(3905)),r=["components"],o={},u=void 0,s={unversionedId:"config/Walkthrough",id:"config/Walkthrough",isDocsHomePage:!1,title:"Walkthrough",description:"- (NOTE : Make sure you know basic lua , if not then check ).",source:"@site/docs/config/Walkthrough.md",sourceDirName:"config",slug:"/config/Walkthrough",permalink:"/config/Walkthrough",version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Learning Lua",permalink:"/getting-started/learn-lua"},next:{title:"Nvim lua stuff",permalink:"/config/Nvim lua stuff"}},p=[{value:"Structure",id:"structure",children:[]},{value:"Walkthrough",id:"walkthrough",children:[]},{value:"Init.lua",id:"initlua",children:[]},{value:"Colors",id:"colors",children:[]},{value:"Core",id:"core",children:[]},{value:"Default config",id:"default-config",children:[]}],c={toc:p};function h(e){var t=e.components,a=(0,l.Z)(e,r);return(0,i.kt)("wrapper",(0,n.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"(NOTE : Make sure you know basic lua , if not then ",(0,i.kt)("a",{parentName:"li",href:"https://nvchad.github.io/getting-started/learn-lua"},"check")," ).")),(0,i.kt)("h2",{id:"structure"},"Structure"),(0,i.kt)("p",null,"NvChad comes with the following file / folder structure. ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/NvChad/NvChad/"},"An up-to-date & full tree can be viewed in the repo")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tree"},"\n\u251c\u2500\u2500 init.lua\n\u2502\n\u251c\u2500\u2500 lua\n\u2502   \u251c\u2500\u2500 colors\n\u2502   \u2502   \u251c\u2500\u2500 highlights.lua\n\u2502   \u2502   \u2514\u2500\u2500 init.lua (i)\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 core\n\u2502   \u2502   \u251c\u2500\u2500 init.lua\n\u2502   \u2502   \u251c\u2500\u2500 autocmds.lua\n\u2502   \u2502   \u251c\u2500\u2500 custom.lua (i)\n\u2502   \u2502   \u251c\u2500\u2500 default_config.lua\n\u2502   \u2502   \u251c\u2500\u2500 hooks.lua (i)\n\u2502   \u2502   \u251c\u2500\u2500 mappings.lua\n\u2502   \u2502   \u251c\u2500\u2500 options.lua\n\u2502   \u2502   \u2514\u2500\u2500 utils.lua (i)\n|   |\n\u2502   \u251c\u2500\u2500 custom\n\u2502   \u2502   \u251c\u2500\u2500 example_chadrc.lua\n\u2502   \u2502   \u251c\u2500\u2500 example_init.lua\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 plugins\n\u2502   \u2502    \u251c\u2500\u2500 init.lua\n\u2502   \u2502    \u251c\u2500\u2500 packerInit.lua\n\u2502   \u2502    \u2514\u2500\u2500 configs\n\u2502   \u2502        \u251c\u2500\u2500 bufferline.lua\n\u2502   \u2502        \u251c\u2500\u2500 others.lua\n\u2502   \u2502        \u2514\u2500\u2500 <many more plugin configs>\n\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The file names in the tree with (i) are meant to be ignored , i.e the user doesnt need to look at them. I assume you have basic lua knowledge The lua code in those files might fret you or look very complex / scare you from NvChad xD. If you're not familiar with lua's syntax then please check ",(0,i.kt)("a",{parentName:"li",href:"getting-started/learn-lua"},"our basic lua guide"),". Don't worry you just need to skim through it.")),(0,i.kt)("h2",{id:"walkthrough"},"Walkthrough"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Letss goooo!")),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://media.discordapp.net/attachments/610012463907209227/891016498733256774/869951078962196571.png",alt:"chad"}),"\n",(0,i.kt)("img",{parentName:"p",src:"https://cdn.discordapp.com/attachments/610012463907209227/891011437810577480/863483056531046450.png",alt:"lessgooo"})),(0,i.kt)("h2",{id:"initlua"},"Init.lua"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"So NvChads's config dir has a lua folder and an init.lua file.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"The init.lua basically loads the core config.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},'You could check there must be a file named "init.lua" in the core folder which makes it easy for us to require it.')),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},'For example , you have a file called "test.lua" and you want to organize your config structure so you put test.lua in a folder called "chadir". So you gotta require this "test.lua" to load it right? It\'s obvious to do this :'))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},'require("chadir.test") or require "chadir.test".\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"You could also rename the test.lua as init.lua , and then you just need to do :")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},'require "chadir".\n -- which calls the init.lua present in the chadir\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},'So basically require "core" is loading the init.lua file in the core folder.')),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"pcall is usually used for error handling. check ","[https://www.lua.org/pil/8.4.html]","(lua docs) for more info.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Let's explain this : local ok, err = pcall(require, module)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},'pcall will run : require module which basically imports that module, which is require "core" in our case.')),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"pcall returns a boolean value and runs the function inside in it , (the require thingy).")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"if the file exists , then the pcall thing above will return 2 values , true and true.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"But for some reason if there's no such module , then pcall will return false and some errors. ok will be set to false and the err variable will be set to the errors produced by pcall.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Basic example for setting assign values to multiple vars at the same time"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},"local a, b = 1, 2\nprint(a,b)\n\n// 1  2 \n")),(0,i.kt)("h2",{id:"colors"},"Colors"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"This dir has two files : init.lua and highlights.lua")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Theming is done with the nvim-base16.lua plugin , this is a fork of the original plugin (nvim-base16.lua) made by @norcalli. The original repo was dead for ages so I had to fork it and this plugin's pretty fast in load times , we have stripped down the code , removed outdated things and made it more NvChad specific.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"The base16 plugin loads the init.lua file.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"The init.lua file in the colors dir loads the base16 plugin and loads highlights after it.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Previously we loaded themes this way :"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},"local base16 = require 'base16'\nbase16(base16.themes(\"ondark\"), true)\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},'Since the addition of chadrc , we added a variable (theme_var instead of "onedark") , this variable was defined in chadrc , so changing the theme name directly from chadrc changed the overall theme!')),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"But this was a little cumbersome since a new nvim window had to be opened to check the theme changes.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"We then added a telescope picker for changing themes on the fly :D.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"So leader + th (leader is the space key) will open a telescope picker and scrolling through the items (themes) in it would temporarily apply theme + preview them in a previewer window of the telescope , pressing enter on the theme name does two things :")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("ol",{parentName:"li"},(0,i.kt)("li",{parentName:"ol"},"apply the theme"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("ol",{parentName:"li",start:2},(0,i.kt)("li",{parentName:"ol"},"save the theme's name in the variable of chadrc file.")))),(0,i.kt)("h2",{id:"core"},"Core"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"The core folder has several files , some of them you don't even need to worry checking like : custom.lua hooks.lua utils.lua.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"The init.lua file in this folder just runs some of the modules i.e files in the core folder , check it yourself!")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"autocmds.lua : Defines some default autocmds in NvChad.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"default_config.lua : This is an important file , more like a global file which has some default options for everything in NvChad , like themes , mappings , other UI related stuff etc.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"If you need something to be changed , then add that thing from default_config.lua to chadrc.lua (in custom folder). Make sure you copy example_chadrc.lua to chadrc.lua!!")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},'mappings.lua : Defines all the default mappings, all mappings are wrapped up into specific functions. For example, each plugin has its own function for mapping ( ex - M.bufferline in mappings.lua). These functions are put in the "Setup() call" of the plugin in the plugins/init.lua config.')),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Those mappings are loaded only if the plugin is loaded!")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"The mappings take values from the chadrc ( if anything related to mappings isn't defined here , then the values will be taken from default_config.lua). I'll explain this part later in this section!")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"options.lua : Defines all default options , again takes values from chadrc or default_config.lua"))),(0,i.kt)("h2",{id:"default-config"},"Default config"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"This file is core/default_config.lua"),(0,i.kt)("li",{parentName:"ul"},"It contains all the default options for various stuffs in NvChad.")),(0,i.kt)("p",null,"For example :"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},'-- options section contains default options\n-- core/options.lua takes values from this part , for example :\n\nM.options = {\n   mapleader = " ",\n}\n\n-- the mapleader\'s value is set to space here.\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},'-- UI related stuffs\nM.ui = {\n   theme = "nord",\n}\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},'\n-- this part has all the plugins related stuff\nM.plugins = {\n\n-- The status section can be used to disable or enable built-in plugins. In this case, we\n-- disable the "nvimtree" plugin (and its config & mappings too), and enable "dashboard".\n\nstatus = {\n  ...\n  nvim_tree = false,\n  dashboard = true,\n  ...\n},\n\n\n-- this has plugin options , so in this case enable_git = 0 disables git status on the nvimtree.\noptions  = {\n  ...\n   nvimtree = {\n         enable_git = 0,\n   },\n  ...\n}\n\n-- this is for replacing default config with your custom config.\n default_plugin_config_replace = {\n     nvim_web_devicons = "",\n     feline = "",\n     bufferline ="",\n     indent_blankline = "",\n     nvim_colorizer = "",\n     nvim_treesitter ="",\n     gitsigns = "",\n     signature = "",\n     better_escape = "",\n     nvim_cmp = "",\n     luasnip = "",\n     nvim-autopairs = "",\n     dashboard = "",\n     nvim_comment = "",\n     nvim_tree ="",\n     telescope = "",\n\n     -- example custom/lspconfig.lua file\n\n     lspconfig = "custom.lspconfig",\n  },\n}\n\nM.mappings = {} has general mappings\nM.mappings.plugins = {} has plugin related mappings\n\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Ok now you might be wondering how are values from the non existant chadrc file taken? (chadrc.lua doesnt exist by default , only example_chadrc.lua does)."),(0,i.kt)("li",{parentName:"ul"},"For example , if the user doesn't set up the theme in chadrc then NvChad will automatically take value from the default_config.lua (core dir)."),(0,i.kt)("li",{parentName:"ul"},"This happens by:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},'require("core.utils").load_config()\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"This basically merges the tables in chadrc to default_config , so if the user makes any changes in the chadrc then that change will overwrite the value in default_config!!"),(0,i.kt)("li",{parentName:"ul"},"You could check plugins/configs/nvimtree.lua file , the 2nd line in it , and various files like statusline , file-icons etc too!")),(0,i.kt)("h1",{id:"plugins"},"Plugins"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"The plugins dir contains three files , init.lua , packerInit.lua and the configs dir.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"packerInit.lua : this file is used for defining packer's init stuff , so things like clone_timeout , compile_on_sync , etc and other packer related options are mentioned here.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"init.lua : is basically the packer config , it calls packerInit first and then following with definitions of other plugins + their configs'")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"For example to add a plugin , packer uses this format :"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},'\nuse {\n  "org or username/reponame",\n  config = function()\n    path to config ( require it)\n  end\n}\n\n-- for example\n\n use {\n       "max397574/better-escape.nvim",\n       config = function()\n          require("plugins.configs.better_escape")\n       end\n    }\n\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},'The lua folder (in .config/nvim) is already on the path so suppose you added a file called example.lua in ".config/nvim/lua".')),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},'To require it you just need to do : require "example" . No need to add the .lua extension :D.')),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"configs dir : All default nvchad plugins's configs are stored here!!")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"You might've seen this function being used in the (plugins/init.lua) file :"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},'config = override_req("nvim_cmp", "plugins.configs.cmp"),\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},'The override_req function here , checks if the "nvim_cmp" is added in the default_plugin_config_replace in (chadrc.lua) file and if it\'s added , then the function will make packer use that custom config.')),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},'In case if that\'s not added then the function will just make use of "plugins.configs.cmp"'))))}h.isMDXComponent=!0}}]);