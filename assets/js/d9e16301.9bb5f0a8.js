"use strict";(self.webpackChunknvchad_site=self.webpackChunknvchad_site||[]).push([[217],{3905:function(e,t,n){n.d(t,{Zo:function(){return s},kt:function(){return g}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var u=r.createContext({}),p=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},s=function(e){var t=p(e.components);return r.createElement(u.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,u=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),m=p(n),g=a,d=m["".concat(u,".").concat(g)]||m[g]||c[g]||i;return n?r.createElement(d,o(o({ref:t},s),{},{components:n})):r.createElement(d,o({ref:t},s))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=m;var l={};for(var u in t)hasOwnProperty.call(t,u)&&(l[u]=t[u]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var p=2;p<i;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},8154:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return u},metadata:function(){return p},toc:function(){return s},default:function(){return m}});var r=n(7462),a=n(3366),i=(n(7294),n(3905)),o=["components"],l={id:"support-debugging",title:"Support & Debugging"},u=void 0,p={unversionedId:"support-debugging",id:"support-debugging",isDocsHomePage:!1,title:"Support & Debugging",description:"Basic Debugging",source:"@site/docs/support.md",sourceDirName:".",slug:"/support-debugging",permalink:"/support-debugging",version:"current",frontMatter:{id:"support-debugging",title:"Support & Debugging"},sidebar:"docs",previous:{title:"FAQ",permalink:"/faq"},next:{title:"Contribute",permalink:"/contribute"}},s=[{value:"Basic Debugging",id:"basic-debugging",children:[]},{value:"Before logging an issue:",id:"before-logging-an-issue",children:[]},{value:"How to gather fundamental debugging info for GitHub issues",id:"how-to-gather-fundamental-debugging-info-for-github-issues",children:[]},{value:"NeoVim debugging options",id:"neovim-debugging-options",children:[]}],c={toc:s};function m(e){var t=e.components,n=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"basic-debugging"},"Basic Debugging"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"If you have trouble with plugins, your first place to look is the packer log"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"less ~/.cache/nvim/packer.nvim.log\n"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"If you still can't figure out what's going wrong, you can remove your compiled Packer plugins with:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"rm -r ~/.config/nvim/plugin`\n")),(0,i.kt)("p",{parentName:"li"},"Then in NeoVim run ",(0,i.kt)("inlineCode",{parentName:"p"},":PackerSync")," and ",(0,i.kt)("strong",{parentName:"p"},"restart NeoVim"),".\nThis will redownload and install all plugins.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"You can check the health of NeoVim with the built-in health check command. In nvim run:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-shell"},":checkhealth\n")))),(0,i.kt)("h2",{id:"before-logging-an-issue"},"Before logging an issue:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/NvChad/NvChad/issues?q=is%3Aissue"},"Search the GitHub issue list")),(0,i.kt)("li",{parentName:"ul"},"Then ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/NvChad/NvChad/issues/new/choose"},"log an issue, be sure to provide ",(0,i.kt)("strong",{parentName:"a"},"all prompted information")))),(0,i.kt)("h2",{id:"how-to-gather-fundamental-debugging-info-for-github-issues"},"How to gather fundamental debugging info for GitHub issues"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Get your current NvChad version",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-shel"},"$ git rev-parse --short HEAD\n"))),(0,i.kt)("li",{parentName:"ul"},"Get all the differences between your local config & NvChad",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"$ git diff origin/HEAD > diff.txt\n"))),(0,i.kt)("li",{parentName:"ul"},"Get the Packer log",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"$ less ~/.cache/nvim/packer.nvim.log\n")))),(0,i.kt)("h2",{id:"neovim-debugging-options"},"NeoVim debugging options"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Verbosity will show what is being executed by NeoVim",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Primarily through the use of ",(0,i.kt)("inlineCode",{parentName:"li"},":set verbose=9")," (or another number 0<= num < 10)"),(0,i.kt)("li",{parentName:"ul"},"Or start NeoVim with ",(0,i.kt)("inlineCode",{parentName:"li"},"nvim -v9")))),(0,i.kt)("li",{parentName:"ul"},"Use the NeoVim command line to call Lua & VimL functions & examine code",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://neovim.io/doc/user/lua.html#vim.inspect()"},"Print a lua table in readable format"),", like the")),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},":lua print(vim.inspect())\n")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://neovim.io/doc/user/lua.html#lua-require"},"Call a lua function manually"))),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},":lua require('<FILE PATH FROM /lua>').function()\n")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://neovim.io/doc/user/lua.html#vim.g"},"Print a buffer option variable"),", for example the current filetype")),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},":lua print(vim.bo.ft)\n:echo &ft\n")))))}m.isMDXComponent=!0}}]);