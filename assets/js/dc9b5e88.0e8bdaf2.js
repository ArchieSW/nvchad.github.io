"use strict";(self.webpackChunknvchad_site=self.webpackChunknvchad_site||[]).push([[882],{3905:function(e,n,r){r.d(n,{Zo:function(){return s},kt:function(){return f}});var t=r(7294);function i(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function o(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function a(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?o(Object(r),!0).forEach((function(n){i(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function c(e,n){if(null==e)return{};var r,t,i=function(e,n){if(null==e)return{};var r,t,i={},o=Object.keys(e);for(t=0;t<o.length;t++)r=o[t],n.indexOf(r)>=0||(i[r]=e[r]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)r=o[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var l=t.createContext({}),u=function(e){var n=t.useContext(l),r=n;return e&&(r="function"==typeof e?e(n):a(a({},n),e)),r},s=function(e){var n=u(e.components);return t.createElement(l.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},p=t.forwardRef((function(e,n){var r=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),p=u(r),f=i,d=p["".concat(l,".").concat(f)]||p[f]||m[f]||o;return r?t.createElement(d,a(a({ref:n},s),{},{components:r})):t.createElement(d,a({ref:n},s))}));function f(e,n){var r=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=r.length,a=new Array(o);a[0]=p;var c={};for(var l in n)hasOwnProperty.call(n,l)&&(c[l]=n[l]);c.originalType=e,c.mdxType="string"==typeof e?e:i,a[1]=c;for(var u=2;u<o;u++)a[u]=r[u];return t.createElement.apply(null,a)}return t.createElement.apply(null,r)}p.displayName="MDXCreateElement"},5598:function(e,n,r){r.r(n),r.d(n,{assets:function(){return s},contentTitle:function(){return l},default:function(){return f},frontMatter:function(){return c},metadata:function(){return u},toc:function(){return m}});var t=r(7462),i=r(3366),o=(r(7294),r(3905)),a=["components"],c={},l="Tips & tricks",u={unversionedId:"config/Tricks",id:"config/Tricks",title:"Tips & tricks",description:"- These are some useful functions which you can map.",source:"@site/docs/config/Tricks.md",sourceDirName:"config",slug:"/config/Tricks",permalink:"/config/Tricks",tags:[],version:"current",frontMatter:{}},s={},m=[{value:"Swap boolean",id:"swap-boolean",level:2},{value:"Simple rename function",id:"simple-rename-function",level:2}],p={toc:m};function f(e){var n=e.components,r=(0,i.Z)(e,a);return(0,o.kt)("wrapper",(0,t.Z)({},p,r,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"tips--tricks"},"Tips & tricks"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"These are some useful functions which you can map."),(0,o.kt)("li",{parentName:"ul"},"They're not included in the main repo so this section's just a collection of useful user functions :o")),(0,o.kt)("h2",{id:"swap-boolean"},"Swap boolean"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"This function swaps booleans, when the cursor's on ",(0,o.kt)("inlineCode",{parentName:"li"},"true")," boolean then running this function makes it false and vice versa.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-lua"},'local swapBoolean = function()\n   local c = vim.api.nvim_get_current_line()\n   local subs = c:match "true" and c:gsub("true", "false") or c:gsub("false", "true")\n\n   vim.api.nvim_set_current_line(subs)\n end\n')),(0,o.kt)("h2",{id:"simple-rename-function"},"Simple rename function"),(0,o.kt)("p",null,"-- This function uses ",(0,o.kt)("inlineCode",{parentName:"p"},"vim.lsp.buf.rename")," to rename variable"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-lua"},'M.rename = function()\n        { "\u256d", "CmpBorder" },\n        { "\u2500", "CmpBorder" },\n        { "\u256e", "CmpBorder" },\n        { "\u2502", "CmpBorder" },\n        { "\u256f", "CmpBorder" },\n        { "\u2500", "CmpBorder" },\n        { "\u2570", "CmpBorder" },\n        { "\u2502", "CmpBorder" },\n    }\n    local function post(rename_old)\n        vim.cmd("stopinsert!")\n        local rename_new = vim.api.nvim_get_current_line()\n        vim.schedule(function()\n            vim.api.nvim_win_close(0, true)\n            vim.lsp.buf.rename(vim.trim(rename_new))\n        end)\n        -- Use notify.nvim, logs notification as warn, title as Variable Rename\n        vim.notify(rename_old .. " \ue349 " .. rename_new, vim.log.levels.WARN, { title = "Variable Rename" })\n    end\n    local rename_old = vim.fn.expand("<cword>")\n    local created_buffer = vim.api.nvim_create_buf(false, true)\n    vim.api.nvim_open_win(created_buffer, true, {\n        relative = "cursor",\n        style = "minimal",\n        border = border,\n        row = 1,\n        col = 0,\n        width = 30,\n        height = 1,\n    })\n    vim.cmd("startinsert")\n\n    vim.keymap.set("i", "<ESC>", function()\n        vim.cmd("q")\n        vim.cmd("stopinsert")\n    end, { buffer = created_buffer })\n\n    vim.keymap.set("i", "<CR>", function()\n        return post(rename_old)\n    end, { buffer = created_buffer })\nend\n')))}f.isMDXComponent=!0}}]);