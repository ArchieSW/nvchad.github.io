"use strict";(self.webpackChunknvchad_site=self.webpackChunknvchad_site||[]).push([[344],{3905:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return d}});var a=t(7294);function l(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){l(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,l=function(e,n){if(null==e)return{};var t,a,l={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(l[t]=e[t]);return l}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(l[t]=e[t])}return l}var u=a.createContext({}),s=function(e){var n=a.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},p=function(e){var n=s(e.components);return a.createElement(u.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,l=e.mdxType,i=e.originalType,u=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),m=s(t),d=l,h=m["".concat(u,".").concat(d)]||m[d]||c[d]||i;return t?a.createElement(h,r(r({ref:n},p),{},{components:t})):a.createElement(h,r({ref:n},p))}));function d(e,n){var t=arguments,l=n&&n.mdxType;if("string"==typeof e||l){var i=t.length,r=new Array(i);r[0]=m;var o={};for(var u in n)hasOwnProperty.call(n,u)&&(o[u]=n[u]);o.originalType=e,o.mdxType="string"==typeof e?e:l,r[1]=o;for(var s=2;s<i;s++)r[s]=t[s];return a.createElement.apply(null,r)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},8565:function(e,n,t){t.r(n),t.d(n,{assets:function(){return p},contentTitle:function(){return u},default:function(){return d},frontMatter:function(){return o},metadata:function(){return s},toc:function(){return c}});var a=t(7462),l=t(3366),i=(t(7294),t(3905)),r=["components"],o={},u=void 0,s={unversionedId:"config/Custom config",id:"config/Custom config",title:"Custom config",description:"Make your own config :",source:"@site/docs/config/Custom config.md",sourceDirName:"config",slug:"/config/Custom config",permalink:"/config/Custom config",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Nvim lua stuff",permalink:"/config/Nvim lua stuff"},next:{title:"Mappings",permalink:"/config/Mappings"}},p={},c=[{value:"Make your own config :",id:"make-your-own-config-",level:2},{value:"Change default options",id:"change-default-options",level:3},{value:"Mappings",id:"mappings",level:3},{value:"Mapping format",id:"mapping-format",level:4},{value:"Mappings table structure",id:"mappings-table-structure",level:4},{value:"Override default mappings",id:"override-default-mappings",level:4},{value:"Mapping with which-key disabled",id:"mapping-with-which-key-disabled",level:4},{value:"Add plugins",id:"add-plugins",level:3},{value:"Replace default config of a plugin",id:"replace-default-config-of-a-plugin",level:3},{value:"Override default config of a plugin",id:"override-default-config-of-a-plugin",level:3},{value:"Local themes",id:"local-themes",level:3},{value:"Override specific colors in themes",id:"override-specific-colors-in-themes",level:3},{value:"Override default highlights",id:"override-default-highlights",level:3},{value:"Custom theme",id:"custom-theme",level:3},{value:"Recommended",id:"recommended",level:4},{value:"Manually",id:"manually",level:4},{value:"Remove plugins",id:"remove-plugins",level:3},{value:"Modify plugin definition options",id:"modify-plugin-definition-options",level:3},{value:"Enable dashboard",id:"enable-dashboard",level:3},{value:"Packer Snapshot",id:"packer-snapshot",level:3},{value:"Autocmds",id:"autocmds",level:3},{value:"Files to edit",id:"files-to-edit",level:3},{value:"Lazy loading",id:"lazy-loading",level:3}],m={toc:c};function d(e){var n=e.components,t=(0,l.Z)(e,r);return(0,i.kt)("wrapper",(0,a.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"make-your-own-config-"},"Make your own config :"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Create custom folder in lua/"),(0,i.kt)("li",{parentName:"ul"},"Copy the /examples dir files in this custom dir."),(0,i.kt)("li",{parentName:"ul"},"Check siduck's ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/siduck/dotfiles/tree/master/nvchad/custom"},"custom config")," as an reference!"),(0,i.kt)("li",{parentName:"ul"},"Below are just examples bruhh")),(0,i.kt)("h3",{id:"change-default-options"},"Change default options"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},'M.options = {\n   user = function()\n      vim.opt.number = false\n   end,\n}\n\n-- or just load the module with your options\n\nM.options = {\n   user = function()\n       require("custom.myoptions")\n   end,\n}\n')),(0,i.kt)("h3",{id:"mappings"},"Mappings"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Mappings are present in a table which is ( core.mappings file )"),(0,i.kt)("li",{parentName:"ul"},"Go and check the mapping structure in ( core.mappings )"),(0,i.kt)("li",{parentName:"ul"},"This file's linked with ",(0,i.kt)("inlineCode",{parentName:"li"},"M.mappings")," field in ( default_config.lua ) so the user can override mappings straight from chadrc itself")),(0,i.kt)("h4",{id:"mapping-format"},"Mapping format"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},' ["keys"] = {"action", "icon  mapping description"}\n\n -- example :\n\n ["<C-n>"] = {"<cmd> NvimTreeToggle <CR>", "Toggle nvimtree"}\n\n ["<C-s>"] = { "<cmd> w <CR>", "\ufb1a  save file" },\n\n ["<leader>uu"] = { "<cmd> :NvChadUpdate <CR>", "\uf135  update nvchad" },\n\n -- can use lua functions too\n ["<leader>tt"] = {\n     function()\n        require("base46").toggle_theme()\n     end,\n        "\uf205   toggle theme",\n   },\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Mapping description is required as we need it for registering in whichkey"),(0,i.kt)("li",{parentName:"ul"},"NOTE : As per the above example, you can use lua functions in the mappings to call lua modules etc"),(0,i.kt)("li",{parentName:"ul"},"Its always better to use an icon at the beginning of the mapping mapping description + 2 or 3 spaces after the icon."),(0,i.kt)("li",{parentName:"ul"},"Find the icons from ",(0,i.kt)("a",{parentName:"li",href:"https://www.nerdfonts.com/cheat-sheet"},"https://www.nerdfonts.com/cheat-sheet")),(0,i.kt)("li",{parentName:"ul"},"This helps gives a good visual look in the whichkey popup and makes it easier to read. But the icon is still optional")),(0,i.kt)("h4",{id:"mappings-table-structure"},"Mappings table structure"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"This is the mappings structure of core.mappings & your mappings file")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},'local M = {}\n\n-- add this table only when you want to disable default keys\nM.disabled = {\n  n = {\n      ["<leader>h"] = "",\n      ["<C-s>"] = ""\n  }\n},\n\nM.abc = {\n\n  n = {\n     ["<C-n>"] = {"<cmd> NvimTreeToggle <CR>", "Toggle nvimtree"}\n  }\n\n  i = {\n    -- more keys!\n  }\n}\n\nM.xyz = {\n  -- stuff\n}\n\nreturn M\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The abc, xyz stuff above can be named anything like a plugin's name etc."),(0,i.kt)("li",{parentName:"ul"},"n, i, v, are the mode names i.e normal, insert, visual"),(0,i.kt)("li",{parentName:"ul"},"Make sure to maintain the table structure from core.mappings ")),(0,i.kt)("h4",{id:"override-default-mappings"},"Override default mappings"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"lets override nvimtree's mappings")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},'-- chadrc\nM.mappings = require "custom.mappings"\n\n-- the above path can be any file in custom dir, just an example!\n')),(0,i.kt)("p",null,"You can also define custom ",(0,i.kt)("inlineCode",{parentName:"p"},"mode_opts")," for each mapping block. These are the default values:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},"-- IMPORTANT: `mode_opts` will apply to all key mappings in `M.<PLUGIN>`\n{\n  buffer = nil, -- Global mappings. Specify a buffer number for buffer local mappings\n  silent = true, -- use `silent` when creating keymaps\n  noremap = true, -- use `noremap` when creating keymaps\n  nowait = false, -- use `nowait` when creating keymaps\n\n  -- all standard key binding opts are supported \n}\n")),(0,i.kt)("p",null,"You only need to add values to ",(0,i.kt)("inlineCode",{parentName:"p"},"mode_opts")," that you want to add or change from the default. If\nyou don't want to alter the default values you don't have to add ",(0,i.kt)("inlineCode",{parentName:"p"},"mode_opts")," to the table at\nall."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"NOTE:")," If you only want some key maps for an extension to have a specified set of ",(0,i.kt)("inlineCode",{parentName:"p"},"mode_opts"),",\nsimply create another ",(0,i.kt)("inlineCode",{parentName:"p"},"M.<PLUGIN>")," block for the same extension (e.g. ",(0,i.kt)("inlineCode",{parentName:"p"},"M.nvimtree_2"),") and define\nthe new ",(0,i.kt)("inlineCode",{parentName:"p"},"mode_opts"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},'-- custom.mappings\n\nlocal M = {}\n\nM.nvimtree = {\n   mode_opts = { silent = false }, -- this is completely optional\n   n = {\n      ["<leader>ah"] = { "<cmd> NvimTreeToggle <CR>", "\uf413   toggle nvimtree" },\n      ["<C-n>"] = { "<cmd> Telescope <CR>", "open telescope" },\n   },\n}\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Check ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/siduck/dotfiles/blob/master/nvchad/custom/mappings.lua"},"siduck's config")," for reference"),(0,i.kt)("li",{parentName:"ul"},"The same way you can add your mappings :)")),(0,i.kt)("h4",{id:"mapping-with-which-key-disabled"},"Mapping with which-key disabled"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The method's just the same but in this you dont have to write the mappings description!"),(0,i.kt)("li",{parentName:"ul"},"Also put this into your custom.init.lua file l")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"}," nvchad.no_WhichKey_map()\n")),(0,i.kt)("h3",{id:"add-plugins"},"Add plugins"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},'-- custom/plugins/init.lua\n\nreturn {\n\n   ["elkowar/yuck.vim"] = { ft = "yuck" }\n\n    ["NvChad/nvterm"] = {\n      config = function()\n         require "plugins.configs.nvterm"\n      end,\n   },\n}\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"you can use a table too or just link the path of your table to organize config clean!")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},'-- chadrc.lua\n\n\nM.plugins = {\n   user = require "custom.plugins"\n}\n')),(0,i.kt)("h3",{id:"replace-default-config-of-a-plugin"},"Replace default config of a plugin"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Use the default_plugin_config_replace table in chadrc.lua")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},'M.plugins = {\n   user = {\n      ["NvChad/nvterm"] = {\n         config = function()\n           require "custom.nvterm"\n         end\n       }\n   },\n}\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Do :PackerSync")),(0,i.kt)("h3",{id:"override-default-config-of-a-plugin"},"Override default config of a plugin"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"This feature comes useful when you want to change one thing from default config of a plugin but not copy paste the whole config!")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},'M.plugins = {\n   override = {\n      ["nvim-treesitter/nvim-treesitter"] = {\n        ensure_installed = {\n          "html",\n          "css",\n       },\n     }\n   }\n}\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Note : the word 'nvim_treesitter' is taken from the override function from /lua/plugins/init.lua's treesitter 'use' table."),(0,i.kt)("li",{parentName:"ul"},"The above method might get messy if you override many plugin configs, so below is a basic example to keep it clean :")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},'local pluginConfs = require "custom.plugins.configs"\n\nM.plugins = {\n   override = {\n      ["nvim-treesitter/nvim-treesitter"] = pluginConfs.treesitter,\n      ["kyazdani42/nvim-tree.lua"] = pluginConfs.nvimtree,\n   },\n}\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},'-- custom/plugins/configs.lua file\n\nlocal M = {}\n\nM.treesitter = {\n   ensure_installed = {\n      "lua",\n      "html",\n      "css",\n   },\n}\n\nM.nvimtree = {\n   git = {\n      enable = true,\n   },\n   view = {\n      side = "right",\n      width = 20,\n   },\n}\n\nreturn M\n')),(0,i.kt)("h3",{id:"local-themes"},"Local themes"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Default themes are in our nvim-base16 repo's hl_themes dir"),(0,i.kt)("li",{parentName:"ul"},"Any nvchad theme structure be like :")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},"-- siduck.lua = theme name\nlocal M = {}\n\nM.base_30 = {\n    -- my colors\n}\n\nM.base_16 = {\n    -- my base16 colors\n}\n\nreturn M\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Make sure to use the exact variable names!")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Then put your theme file in /custom/themes dir , ex : custom/themes/siduck.lua"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},'M.ui = {\n   theme = "siduck",\n}\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"NOTE: The telescope theme switcher is still WIP so u have to add theme name in chadrc manually for now.")),(0,i.kt)("h3",{id:"override-specific-colors-in-themes"},"Override specific colors in themes"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},'M.ui = {\n\n   changed_themes = {\n      onedark = {\n         base_16 = {\n            base00 = "#mycol",\n         },\n         base_30 = {\n            red = "#mycol",\n            white = "#mycol",\n         },\n      },\n\n      nord = {\n         -- and so on!\n      },\n   },\n}\n')),(0,i.kt)("h3",{id:"override-default-highlights"},"Override default highlights"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"(NOTE: This method can also be used to add your own highlight groups too)"),(0,i.kt)("li",{parentName:"ul"},"Make sure you use a valid hl group!")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},'-- local colors = require("custom.colors").base_30\n-- make sure to copy paste your theme color from base16 repo manually to this file ;(\n-- avoid the line with M = require("....")\n\nM.ui = {\n   hl_override = {\n      --override default highlights\n      Pmenu = { bg = "#ffffff" },\n\n      MyHighlightGroup = {\n         fg = "abc",\n         bg = "xyz"\n      }\n   },\n}\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"NOTE: check our base16 repo's integration section to know the default hl groups used")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"You can even use the path of the table in hl_override table (make sure u load it in variable before) like :"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},'-- custom.highlights\nreturn   {\n      Pmenu = { bg = "#ffffff" },\n      MyHighlightGroup = {\n         fg = "abc",\n         bg = "xyz"\n      }\n}\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},'-- chadrc\nlocal my_highlights = require("custom.highlights")\n\nM.ui = {\n   hl_override = my_highlights\n}\n')),(0,i.kt)("h3",{id:"custom-theme"},"Custom theme"),(0,i.kt)("p",null,"Many popular themes are integrated perfectly by default (check them by ",(0,i.kt)("kbd",null,"\\<Leader",">"),"+",(0,i.kt)("kbd",null,"t"),"+",(0,i.kt)("kbd",null,"h")," or ",(0,i.kt)("inlineCode",{parentName:"p"},":Telescope themes"),").\nIf your favorite one is not covered, you could get it by the followings:"),(0,i.kt)("h4",{id:"recommended"},"Recommended"),(0,i.kt)("p",null,"Make a ",(0,i.kt)("a",{parentName:"p",href:"https://nvchad.github.io/contribute#how-to-submit-themes"},"PR")," or open an ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/NvChad/NvChad/issues"},"issue")," for the theme on Github."),(0,i.kt)("h4",{id:"manually"},"Manually"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"add themes as plugins:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},'--  custom/plugins/inited.lua\n\nreturn {\n    { "local/path/to/mytheme" }, -- local\n    { "Iron-E/nvim-highlite" }, -- remote\n}\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"add colors file in format of ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/NvChad/nvim-base16.lua/blob/master/lua/hl_themes/aquarium.lua"},"this")," for ui stuffs:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},'-- custom/colors.lua\n\nreturn {\n    white = "#ced4df",\n    darker_black = "#1a1a24",\n    black = "#20202A", --  nvim bg\n    ...\n}\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"set colors and theme in ",(0,i.kt)("inlineCode",{parentName:"li"},"chadrc.lua"),":")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},'-- custom/chadrc.lua\n\nM.ui = {\n  theme = "mytheme",\n  -- theme = "highlite",\n  colors = "custom.colors",\n}\n')),(0,i.kt)("p",null,"(",(0,i.kt)("em",{parentName:"p"},"Note"),", the compatibility of a custom theme with NvChad is not guaranteed, and potential highlighting issues should be fixed by yourself in ",(0,i.kt)("inlineCode",{parentName:"p"},"hl_override")," or somewhere else)"),(0,i.kt)("h3",{id:"remove-plugins"},"Remove plugins"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},'M.plugins = {\n  remove = {\n      "andymass/vim-matchup",\n      "NvChad/nvterm",\n   },\n}\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Do :PackerSync")),(0,i.kt)("h3",{id:"modify-plugin-definition-options"},"Modify plugin definition options"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"For example this is nvimtree's definition")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},' ["kyazdani42/nvim-tree.lua"] = {\n      cmd = { "NvimTreeToggle", "NvimTreeFocus" },\n\n      setup = function()\n         require("core.mappings").nvimtree()\n      end,\n\n      config = function()\n         require "plugins.configs.nvimtree"\n      end,\n }\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Now to change cmd, setup or any option defined in it :")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},'\nM.plugins = {\n  user = {\n      ["kyazdani42/nvim-tree.lua"] = {\n      cmd = { "abc"},\n\n      setup = function()\n         require("core.mappings").yourfile\n      end,\n\n      config = function()\n        your stuff!\n      end,\n   }\n} }\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Do :PackerSync")),(0,i.kt)("h3",{id:"enable-dashboard"},"Enable dashboard"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},'local M = {}\n\nM.plugins = {\n   user = {\n      ["goolord/alpha-nvim"] = {\n         disable = false,\n      },\n   },\n}\n\nreturn M\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Do :PackerSync"),(0,i.kt)("li",{parentName:"ul"},"The above is an example, its better to put alpha in your custom plugins list table which is most probably in another file if you like organizing stuff")),(0,i.kt)("h3",{id:"packer-snapshot"},"Packer Snapshot"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Lets run ",(0,i.kt)("inlineCode",{parentName:"li"},":PackerSnapshot stable_chad")," (this command creates new snapshots)"),(0,i.kt)("li",{parentName:"ul"},"my chadrc could look like this")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},'M.plugins = {\n\n  override = {\n      ["wbthomason/packer.nvim"] = {\n          snapshot = "stable_chad",\n       }\n   }\n}\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"In case there's a breaking change, I can just do ",(0,i.kt)("inlineCode",{parentName:"li"},":PackerSnapshotRollback stable_chad")," and wait for 1-2 minutes"),(0,i.kt)("li",{parentName:"ul"},"To delete that snapshot, ",(0,i.kt)("inlineCode",{parentName:"li"},"PackerSnapshotDelete stable_chad"))),(0,i.kt)("h3",{id:"autocmds"},"Autocmds"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"for example you can create a new file called autochad_cmds.lua in the lua/custom folder and require it in lua/custom/init.lua! or just define autocmds in custom/init.lua")),(0,i.kt)("h3",{id:"files-to-edit"},"Files to edit"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Only edit files in custom dir, dont touch anything outside it."),(0,i.kt)("li",{parentName:"ul"},"The rest of the files outside the custom folder will get overwritten when updated using ",(0,i.kt)("inlineCode",{parentName:"li"},"<leader> + uu")," .")),(0,i.kt)("h3",{id:"lazy-loading"},"Lazy loading"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"We lazy load almost 95% of the plugins, so we expect you to lazy load the plugins you've added to reduce startuptime. We don't want users making NvChad slow just because they didn't lazy load plugins they've added!")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Check ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/wbthomason/packer.nvim#specifying-plugins"},"packer's readme")," for more info!"))),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://cdn.discordapp.com/attachments/610012463907209227/891011437810577480/863483056531046450.png",alt:"lessgooo"})),(0,i.kt)("p",null,"(Note : Please open out an ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/NvChad/nvchad.github.io/issues"},"issue")," on the repo if you find any inaccuracies in the docs!)"))}d.isMDXComponent=!0}}]);