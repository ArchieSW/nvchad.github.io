"use strict";(self.webpackChunknvchad_site=self.webpackChunknvchad_site||[]).push([[458],{3905:function(e,n,t){t.d(n,{Zo:function(){return s},kt:function(){return f}});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var u=r.createContext({}),c=function(e){var n=r.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},s=function(e){var n=c(e.components);return r.createElement(u.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,u=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),m=c(t),f=a,d=m["".concat(u,".").concat(f)]||m[f]||p[f]||i;return t?r.createElement(d,l(l({ref:n},s),{},{components:t})):r.createElement(d,l({ref:n},s))}));function f(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,l=new Array(i);l[0]=m;var o={};for(var u in n)hasOwnProperty.call(n,u)&&(o[u]=n[u]);o.originalType=e,o.mdxType="string"==typeof e?e:a,l[1]=o;for(var c=2;c<i;c++)l[c]=t[c];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},6634:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return o},contentTitle:function(){return u},metadata:function(){return c},toc:function(){return s},default:function(){return m}});var r=t(7462),a=t(3366),i=(t(7294),t(3905)),l=["components"],o={},u="Extras",c={unversionedId:"Extras",id:"Extras",isDocsHomePage:!1,title:"Extras",description:"- Plugins which seem awesome and cool , which enhance the experience while working in neovim and aren't added by default in nvchad will be added here.",source:"@site/docs/Extras.md",sourceDirName:".",slug:"/Extras",permalink:"/Extras",version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Features",permalink:"/features"},next:{title:"FAQ",permalink:"/faq"}},s=[{value:"neoscroll.nvim",id:"neoscrollnvim",children:[]},{value:"autosave.nvim",id:"autosavenvim",children:[]},{value:"Truezen.nvim",id:"truezennvim",children:[]},{value:"filetype.nvim",id:"filetypenvim",children:[]}],p={toc:s};function m(e){var n=e.components,t=(0,a.Z)(e,l);return(0,i.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"extras"},"Extras"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Plugins which seem awesome and cool , which enhance the experience while working in neovim and aren't added by default in nvchad will be added here.")),(0,i.kt)("h2",{id:"neoscrollnvim"},"neoscroll.nvim"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Smooth scrolling neovim plugin written in lua"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/karb94/neoscroll.nvim"},"repo")),(0,i.kt)("li",{parentName:"ul"},"config :")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},'  use {\n      "karb94/neoscroll.nvim",\n       opt = true,\n       config = function()\n          require("neoscroll").setup()\n       end,\n\n       -- lazy loading\n       setup = function()\n         require("core.utils").packer_lazy_load "neoscroll.nvim"\n       end,\n}\n')),(0,i.kt)("h2",{id:"autosavenvim"},"autosave.nvim"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Auto save files plugin written in lua"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/Pocco81/AutoSave.nvim"},"repo")),(0,i.kt)("li",{parentName:"ul"},"config :")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},'   use {\n   "Pocco81/AutoSave.nvim",\n   config = function()\n      local autosave = require "autosave"\n\n      autosave.setup {\n         enabled = true,\n         execution_message = "autosaved at : " .. vim.fn.strftime "%H:%M:%S",\n         events = { "InsertLeave", "TextChanged" },\n         conditions = {\n            exists = true,\n            filetype_is_not = {},\n            modifiable = true,\n         },\n         clean_command_line_interval = 2500,\n         on_off_commands = true,\n         write_all_buffers = false,\n      }\n   end,\n}\n')),(0,i.kt)("h2",{id:"truezennvim"},"Truezen.nvim"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Clean and elegant distraction-free writing for NeoVim."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/Pocco81/TrueZen.nvim"},"repo")),(0,i.kt)("li",{parentName:"ul"},"config :")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},'   use {\n      "Pocco81/TrueZen.nvim",\n      cmd = {\n         "TZAtaraxis",\n         "TZMinimalist",\n         "TZFocus",\n      },\n      config = function()\n          -- check https://github.com/Pocco81/TrueZen.nvim#setup-configuration (init.lua version)\n      end\n   }\n')),(0,i.kt)("h2",{id:"filetypenvim"},"filetype.nvim"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"A fast and lua alternative to ",(0,i.kt)("inlineCode",{parentName:"li"},"filetype.vim"),". It is ~175x faster than ",(0,i.kt)("inlineCode",{parentName:"li"},"filetype.vim")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/nathom/filetype.nvim"},"Repo")),(0,i.kt)("li",{parentName:"ul"},"Config :")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},'   use { "nathom/filetype.nvim" }\n')),(0,i.kt)("p",null,"Add the following to ",(0,i.kt)("inlineCode",{parentName:"p"},"lua/core/options.lua")," :"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},"   -- Stop sourcing filetype.vim\n   vim.g.did_load_filetypes = 1\n")))}m.isMDXComponent=!0}}]);