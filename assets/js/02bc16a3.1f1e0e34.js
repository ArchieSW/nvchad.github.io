"use strict";(self.webpackChunknvchad_site=self.webpackChunknvchad_site||[]).push([[719],{3905:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return g}});var r=t(7294);function l(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){l(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,r,l=function(e,n){if(null==e)return{};var t,r,l={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(l[t]=e[t]);return l}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(l[t]=e[t])}return l}var a=r.createContext({}),c=function(e){var n=r.useContext(a),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},p=function(e){var n=c(e.components);return r.createElement(a.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},f=r.forwardRef((function(e,n){var t=e.components,l=e.mdxType,i=e.originalType,a=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),f=c(t),g=l,m=f["".concat(a,".").concat(g)]||f[g]||u[g]||i;return t?r.createElement(m,s(s({ref:n},p),{},{components:t})):r.createElement(m,s({ref:n},p))}));function g(e,n){var t=arguments,l=n&&n.mdxType;if("string"==typeof e||l){var i=t.length,s=new Array(i);s[0]=f;var o={};for(var a in n)hasOwnProperty.call(n,a)&&(o[a]=n[a]);o.originalType=e,o.mdxType="string"==typeof e?e:l,s[1]=o;for(var c=2;c<i;c++)s[c]=t[c];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}f.displayName="MDXCreateElement"},3442:function(e,n,t){t.r(n),t.d(n,{contentTitle:function(){return a},default:function(){return f},frontMatter:function(){return o},metadata:function(){return c},toc:function(){return p}});var r=t(7462),l=t(3366),i=(t(7294),t(3905)),s=["components"],o={},a=void 0,c={unversionedId:"config/Lsp stuff",id:"config/Lsp stuff",isDocsHomePage:!1,title:"Lsp stuff",description:"Setup lsp server",source:"@site/docs/config/Lsp stuff.md",sourceDirName:"config",slug:"/config/Lsp stuff",permalink:"/config/Lsp stuff",version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Custom config",permalink:"/config/Custom config"},next:{title:"Format & lint",permalink:"/config/Format & lint"}},p=[{value:"Setup lsp server",id:"setup-lsp-server",children:[]},{value:"lsp-installer",id:"lsp-installer",children:[{value:"Basic config",id:"basic-config",children:[]}]}],u={toc:p};function f(e){var n=e.components,t=(0,l.Z)(e,s);return(0,i.kt)("wrapper",(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"setup-lsp-server"},"Setup lsp server"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Skim through ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/neovim/nvim-lspconfig"},"lspconfig repo")," to get a general overview of how the config looks/works.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Then check ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/neovim/nvim-lspconfig/blob/master/doc/server_configurations.md"},"server_configurations.md")," to make sure your language's lsp server is present there.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Create a file in your custom folder. (I would suggest creating plugins dir in custom folder , so /custom/plugins/lspconfig.lua is the config file for this example).")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Enter the file path in the chadrc's lspconfig section :"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},'M.plugins = {\n   options = {\n      lspconfig = {\n         setup_lspconf = "custom.plugins.lspconfig",\n      },\n   },\n}\n\n-- so setup_lspconf = any file but that should be in custom dir!\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The following file is an example lspconfig file ")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},'local M = {}\n\nM.setup_lsp = function(attach, capabilities)\n   local lspconfig = require "lspconfig"\n\n   -- lspservers with default config\n   local servers = { "html", "cssls", "clangd" }\n\n   for _, lsp in ipairs(servers) do\n      lspconfig[lsp].setup {\n         on_attach = attach,\n         capabilities = capabilities,\n         flags = {\n            debounce_text_changes = 150,\n         },\n      }\n   end\nend\n\nreturn M\n')),(0,i.kt)("h2",{id:"lsp-installer"},"lsp-installer"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"If you don't like copy pasting configs for your lspservers and installing lspservers manually , then try nvim-lspinstalller.\n(Make sure you install lsp-installer, you should know how to add plugins in nvchad!)")),(0,i.kt)("h3",{id:"basic-config"},"Basic config"),(0,i.kt)("p",null,"note: The below snippet must be your custom lspconfig! (that setup_lspconf variable in chadrc)"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},'M.plugins = {\n  options = {\n     lspconfig = {\n       setup_lspconf = "custom.configs.lspconfig", -- or any path\n     }\n  }\n}\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},'-- custom.configs.lspconfig file \n\nlocal M = {}\n\nM.setup_lsp = function(attach, capabilities)\n   local lsp_installer = require "nvim-lsp-installer"\n\n   lsp_installer.settings {\n      ui = {\n         icons = {\n            server_installed = "\ufadf" ,\n            server_pending = "\uf62f",\n            server_uninstalled = "\u2717",\n         },\n      },\n   }\n\n   lsp_installer.on_server_ready(function(server)\n      local opts = {\n         on_attach = attach,\n         capabilities = capabilities,\n         flags = {\n            debounce_text_changes = 150,\n         },\n         settings = {},\n      }\n\n      server:setup(opts)\n      vim.cmd [[ do User LspAttachBuffers ]]\n   end)\nend\n\nreturn M\n')))}f.isMDXComponent=!0}}]);