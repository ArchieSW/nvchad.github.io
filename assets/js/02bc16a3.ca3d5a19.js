"use strict";(self.webpackChunknvchad_site=self.webpackChunknvchad_site||[]).push([[719],{3905:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return m}});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function a(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},s=Object.keys(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var o=r.createContext({}),c=function(e){var n=r.useContext(o),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},p=function(e){var n=c(e.components);return r.createElement(o.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},f=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,s=e.originalType,o=e.parentName,p=a(e,["components","mdxType","originalType","parentName"]),f=c(t),m=i,g=f["".concat(o,".").concat(m)]||f[m]||u[m]||s;return t?r.createElement(g,l(l({ref:n},p),{},{components:t})):r.createElement(g,l({ref:n},p))}));function m(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var s=t.length,l=new Array(s);l[0]=f;var a={};for(var o in n)hasOwnProperty.call(n,o)&&(a[o]=n[o]);a.originalType=e,a.mdxType="string"==typeof e?e:i,l[1]=a;for(var c=2;c<s;c++)l[c]=t[c];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}f.displayName="MDXCreateElement"},3442:function(e,n,t){t.r(n),t.d(n,{contentTitle:function(){return o},default:function(){return f},frontMatter:function(){return a},metadata:function(){return c},toc:function(){return p}});var r=t(7462),i=t(3366),s=(t(7294),t(3905)),l=["components"],a={},o=void 0,c={unversionedId:"config/Lsp stuff",id:"config/Lsp stuff",isDocsHomePage:!1,title:"Lsp stuff",description:"Setup lsp server",source:"@site/docs/config/Lsp stuff.md",sourceDirName:"config",slug:"/config/Lsp stuff",permalink:"/config/Lsp stuff",version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Custom config",permalink:"/config/Custom config"},next:{title:"Format & lint",permalink:"/config/Format & lint"}},p=[{value:"Setup lsp server",id:"setup-lsp-server",children:[]},{value:"lsp-installer",id:"lsp-installer",children:[{value:"Basic config",id:"basic-config",children:[]}]}],u={toc:p};function f(e){var n=e.components,t=(0,i.Z)(e,l);return(0,s.kt)("wrapper",(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,s.kt)("h2",{id:"setup-lsp-server"},"Setup lsp server"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},"Skim through ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/neovim/nvim-lspconfig"},"lspconfig repo")," to get a general overview of how the config looks/works.")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},"Then check ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/neovim/nvim-lspconfig/blob/master/doc/server_configurations.md"},"server_configurations.md")," to make sure your language's lsp server is present there.")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},"Create a file in your custom folder. (I would suggest creating plugins dir in custom folder , so /custom/plugins/lspconfig.lua is the config file for this example).")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},"Enter the file path in the chadrc's lspconfig section :"))),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-lua"},'M.plugins = {\n   options = {\n      lspconfig = {\n         setup_lspconf = "custom.plugins.lspconfig",\n      },\n   },\n}\n\n-- so setup_lspconf = any file but that should be in custom dir!\n')),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"The following file is an example lspconfig file ")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-lua"},'local M = {}\n\nM.setup_lsp = function(attach, capabilities)\n   local lspconfig = require "lspconfig"\n\n   -- lspservers with default config\n   local servers = { "html", "cssls", "clangd" }\n\n   for _, lsp in ipairs(servers) do\n      lspconfig[lsp].setup {\n         on_attach = attach,\n         capabilities = capabilities,\n         flags = {\n            debounce_text_changes = 150,\n         },\n      }\n   end\nend\n\nreturn M\n')),(0,s.kt)("h2",{id:"lsp-installer"},"lsp-installer"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"If you don't like copy pasting configs for your lspservers and installing lspservers manually , then try nvim-lspinstalller.\n(Make sure you install lsp-installer, you should know how to add plugins in nvchad!)")),(0,s.kt)("h3",{id:"basic-config"},"Basic config"),(0,s.kt)("p",null,"note: The below snippet must be your custom lspconfig! (that setup_lspconf variable in chadrc)"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-lua"},'M.options = {\n  lspconfig = {\n    setup_lspconf = "custom.configs.lspconfig", -- or any path\n  }\n}\n')),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-lua"},'-- custom.configs.lspconfig file \n\nlocal M = {}\n\nM.setup_lsp = function(attach, capabilities)\n   local lsp_installer = require "nvim-lsp-installer"\n\n   lsp_installer.settings {\n      ui = {\n         icons = {\n            server_installed = "\ufadf" ,\n            server_pending = "\uf62f",\n            server_uninstalled = "\u2717",\n         },\n      },\n   }\n\n   lsp_installer.on_server_ready(function(server)\n      local opts = {\n         on_attach = attach,\n         capabilities = capabilities,\n         flags = {\n            debounce_text_changes = 150,\n         },\n         settings = {},\n      }\n\n      -- basic example to edit lsp server\'s options, disabling tsserver\'s inbuilt formatter\n      if server.name == \'tsserver\' then \n        opts.on_attach = function(client, bufnr)\n           client.resolved_capabilities.document_formatting = false\n           vim.api.nvim_buf_set_keymap(bufnr, "n", "<space>fm", "<cmd>lua vim.lsp.buf.formatting()<CR>", {})\n         end,\n      end\n      \n      server:setup(opts)\n      vim.cmd [[ do User LspAttachBuffers ]]\n   end)\nend\n\nreturn M\n')))}f.isMDXComponent=!0}}]);