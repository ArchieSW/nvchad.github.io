"use strict";(self.webpackChunknvchad_site=self.webpackChunknvchad_site||[]).push([[719],{3905:function(n,e,t){t.d(e,{Zo:function(){return u},kt:function(){return m}});var i=t(7294);function r(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function l(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(n);e&&(i=i.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,i)}return t}function o(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?l(Object(t),!0).forEach((function(e){r(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function s(n,e){if(null==n)return{};var t,i,r=function(n,e){if(null==n)return{};var t,i,r={},l=Object.keys(n);for(i=0;i<l.length;i++)t=l[i],e.indexOf(t)>=0||(r[t]=n[t]);return r}(n,e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(n);for(i=0;i<l.length;i++)t=l[i],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(r[t]=n[t])}return r}var a=i.createContext({}),c=function(n){var e=i.useContext(a),t=e;return n&&(t="function"==typeof n?n(e):o(o({},e),n)),t},u=function(n){var e=c(n.components);return i.createElement(a.Provider,{value:e},n.children)},p={inlineCode:"code",wrapper:function(n){var e=n.children;return i.createElement(i.Fragment,{},e)}},f=i.forwardRef((function(n,e){var t=n.components,r=n.mdxType,l=n.originalType,a=n.parentName,u=s(n,["components","mdxType","originalType","parentName"]),f=c(t),m=r,g=f["".concat(a,".").concat(m)]||f[m]||p[m]||l;return t?i.createElement(g,o(o({ref:e},u),{},{components:t})):i.createElement(g,o({ref:e},u))}));function m(n,e){var t=arguments,r=e&&e.mdxType;if("string"==typeof n||r){var l=t.length,o=new Array(l);o[0]=f;var s={};for(var a in e)hasOwnProperty.call(e,a)&&(s[a]=e[a]);s.originalType=n,s.mdxType="string"==typeof n?n:r,o[1]=s;for(var c=2;c<l;c++)o[c]=t[c];return i.createElement.apply(null,o)}return i.createElement.apply(null,t)}f.displayName="MDXCreateElement"},3442:function(n,e,t){t.r(e),t.d(e,{frontMatter:function(){return s},contentTitle:function(){return a},metadata:function(){return c},toc:function(){return u},default:function(){return f}});var i=t(7462),r=t(3366),l=(t(7294),t(3905)),o=["components"],s={},a=void 0,c={unversionedId:"config/Lsp stuff",id:"config/Lsp stuff",isDocsHomePage:!1,title:"Lsp stuff",description:"- Skim through lspconfig repo to get a general overview of how the config looks/works.",source:"@site/docs/config/Lsp stuff.md",sourceDirName:"config",slug:"/config/Lsp stuff",permalink:"/config/Lsp stuff",version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Custom config",permalink:"/config/Custom config"},next:{title:"Autocompletion",permalink:"/config/Autocompletion"}},u=[{value:"Install plugins",id:"install-plugins",children:[]},{value:"Configs",id:"configs",children:[]},{value:"Only lspconfig",id:"only-lspconfig",children:[{value:"Install",id:"install",children:[]},{value:"Config",id:"config",children:[]}]}],p={toc:u};function f(n){var e=n.components,t=(0,r.Z)(n,o);return(0,l.kt)("wrapper",(0,i.Z)({},p,t,{components:e,mdxType:"MDXLayout"}),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Skim through ",(0,l.kt)("a",{parentName:"li",href:"https://github.com/neovim/nvim-lspconfig"},"lspconfig repo")," to get a general overview of how the config looks/works."),(0,l.kt)("li",{parentName:"ul"},"Basic ",(0,l.kt)("a",{parentName:"li",href:"https://github.com/williamboman/nvim-lsp-installer/#commands"},"lsp_installer commands")),(0,l.kt)("li",{parentName:"ul"},"Then check ",(0,l.kt)("a",{parentName:"li",href:"https://github.com/neovim/nvim-lspconfig/blob/master/doc/server_configurations.md"},"server_configurations.md")," to make sure your language's lsp server is present there.")),(0,l.kt)("h2",{id:"install-plugins"},"Install plugins"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"plugins used :  nvim-lspconfig, nvim-lsp-installer , lsp-signature.nvim ")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-lua"},' use {\n      "williamboman/nvim-lsp-installer",\n      config = function()\n         require "custom.plugins.lspconfig"\n      end,\n\n      -- lazy load!\n      setup = function()\n         require("core.utils").packer_lazy_load "nvim-lsp-installer"\n         -- reload the current file so lsp actually starts for it\n         vim.defer_fn(function()\n            vim.cmd \'if &ft == "packer" | echo "" | else | silent! e %\'\n         end, 0)\n      end,\n      opt = true,\n   }\n\n   use {\n      "neovim/nvim-lspconfig",\n      module = "lspconfig",\n      after = "nvim-lsp-installer",\n   }\n\n   use {\n      "ray-x/lsp_signature.nvim",\n      after = "nvim-lspconfig",\n      config = function()\n         require "custom.plugins.signature"\n      end,\n   }\n')),(0,l.kt)("h2",{id:"configs"},"Configs"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"custom/plugins/lspconfig.lua be like ")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-lua"},'require("plugins.configs.others").lsp_handlers()\n\nlocal function on_attach(_, bufnr)\n   local function buf_set_option(...)\n      vim.api.nvim_buf_set_option(bufnr, ...)\n   end\n\n   -- Enable completion triggered by <c-x><c-o>\n   buf_set_option("omnifunc", "v:lua.vim.lsp.omnifunc")\n   require("core.mappings").lspconfig()\nend\n\nlocal capabilities = vim.lsp.protocol.make_client_capabilities()\nlocal lsp_installer = require "nvim-lsp-installer"\n\nlsp_installer.settings {\n   ui = {\n      icons = {\n         server_installed = "\ufadf",\n         server_pending = "\uf62f",\n         server_uninstalled = "\u2717",\n      },\n   },\n}\n\nlsp_installer.on_server_ready(function(server)\n   -- server options, so default options for all servers\n   local opts = {\n      on_attach = on_attach,\n      capabilities = capabilities,\n      flags = {\n         debounce_text_changes = 150,\n      },\n      settings = {},\n   }\n\n   server:setup(opts)\n   vim.cmd [[ do User LspAttachBuffers ]]\nend)\n')),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"custom/plugins/signature.lua be like ")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-lua"},'local present, lspsignature = pcall(require, "lsp_signature")\n\nif present then\n   lspsignature.setup {\n      bind = true,\n      doc_lines = 0,\n      floating_window = true,\n      fix_pos = true,\n      hint_enable = true,\n      hint_prefix = "\uf7fb ",\n      hint_scheme = "String",\n      hi_parameter = "Search",\n      max_height = 22,\n      max_width = 120,\n      handler_opts = {\n         border = "single", -- double, single, shadow, none\n      },\n      zindex = 200,\n      padding = "",\n   }\nend\n')),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Now install your lsp server! :LspInstall html")),(0,l.kt)("h2",{id:"only-lspconfig"},"Only lspconfig"),(0,l.kt)("h3",{id:"install"},"Install"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-lua"},'use {\n      "neovim/nvim-lspconfig",\n      module = "lspconfig",\n\n      config = function()\n         require "custom.plugins.lspconfig"\n      end,\n\n      -- lazy load!\n      setup = function()\n         require("core.utils").packer_lazy_load "nvim-lspconfig"\n         vim.defer_fn(function()\n            vim.cmd \'if &ft == "packer" | echo "" | else | silent! e %\'\n         end, 0)\n      end,\n      opt = true,\n}\n')),(0,l.kt)("h3",{id:"config"},"Config"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-lua"},'require("plugins.configs.others").lsp_handlers()\n\nlocal function on_attach(_, bufnr)\n   local function buf_set_option(...)\n      vim.api.nvim_buf_set_option(bufnr, ...)\n   end\n\n   -- Enable completion triggered by <c-x><c-o>\n   buf_set_option("omnifunc", "v:lua.vim.lsp.omnifunc")\n   require("core.mappings").lspconfig()\nend\n\nlocal capabilities = vim.lsp.protocol.make_client_capabilities()\nlocal lspconfig = require "lspconfig"\n\n-- lspservers with default config\nlocal servers = { "html", "cssls" }\n\nfor _, lsp in ipairs(servers) do\n   lspconfig[lsp].setup {\n      on_attach = on_attach,\n      capabilities = capabilities,\n      flags = {\n         debounce_text_changes = 150,\n      },\n   }\nend\n')),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Check siduck's ",(0,l.kt)("a",{parentName:"li",href:"https://github.com/siduck/dotfiles/blob/master/nvchad/custom/plugins/lspconfig.lua"},"lspconfig")," for reference")))}f.isMDXComponent=!0}}]);