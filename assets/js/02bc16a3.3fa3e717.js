"use strict";(self.webpackChunknvchad_site=self.webpackChunknvchad_site||[]).push([[719],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>g});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function a(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},l=Object.keys(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=r.createContext({}),c=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},p=function(e){var n=c(e.components);return r.createElement(s.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},f=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,l=e.originalType,s=e.parentName,p=a(e,["components","mdxType","originalType","parentName"]),f=c(t),g=i,m=f["".concat(s,".").concat(g)]||f[g]||u[g]||l;return t?r.createElement(m,o(o({ref:n},p),{},{components:t})):r.createElement(m,o({ref:n},p))}));function g(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var l=t.length,o=new Array(l);o[0]=f;var a={};for(var s in n)hasOwnProperty.call(n,s)&&(a[s]=n[s]);a.originalType=e,a.mdxType="string"==typeof e?e:i,o[1]=a;for(var c=2;c<l;c++)o[c]=t[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}f.displayName="MDXCreateElement"},6975:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>u,frontMatter:()=>l,metadata:()=>a,toc:()=>c});var r=t(7462),i=(t(7294),t(3905));const l={},o=void 0,a={unversionedId:"config/Lsp stuff",id:"config/Lsp stuff",title:"Lsp stuff",description:"Setup lsp server",source:"@site/docs/config/Lsp stuff.md",sourceDirName:"config",slug:"/config/Lsp stuff",permalink:"/config/Lsp stuff",tags:[],version:"current",frontMatter:{},sidebar:"config",previous:{title:"UI plugins",permalink:"/config/nvchad_ui"},next:{title:"Format & lint",permalink:"/config/Format & lint"}},s={},c=[{value:"Setup lsp server",id:"setup-lsp-server",level:2},{value:"lsp-installer",id:"lsp-installer",level:2}],p={toc:c};function u(e){let{components:n,...t}=e;return(0,i.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"setup-lsp-server"},"Setup lsp server"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Skim through ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/neovim/nvim-lspconfig"},"lspconfig repo")," to get a general overview of how the config looks/works."),(0,i.kt)("li",{parentName:"ul"},"Then check ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/neovim/nvim-lspconfig/blob/master/doc/server_configurations.md"},"server_configurations.md")," to make sure your language's lsp server is present there.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},'-- we are just modifying lspconfig\'s packer definition table\n-- put this in your custom plugins section\n\n["neovim/nvim-lspconfig"] = {\n    config = function()\n      require "plugins.configs.lspconfig"\n      require "custom.plugins.lspconfig"\n    end,\n},\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},'-- custom.plugins.lspconfig\nlocal on_attach = require("plugins.configs.lspconfig").on_attach\nlocal capabilities = require("plugins.configs.lspconfig").capabilities\n\nlocal lspconfig = require "lspconfig"\nlocal servers = { "html", "cssls", "clangd"}\n\nfor _, lsp in ipairs(servers) do\n  lspconfig[lsp].setup {\n    on_attach = on_attach,\n    capabilities = capabilities,\n  }\nend\n')),(0,i.kt)("h2",{id:"lsp-installer"},"lsp-installer"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},":LspInstall clangd \n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"We've enabled automatic installation in lsp-installer config, meaning that you dont have to run LspInstall anymore. Any lsp server you configure in your custom lspconfig file, lsp-installer will detect it and install the lsp server automatically!")))}u.isMDXComponent=!0}}]);