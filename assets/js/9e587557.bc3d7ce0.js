"use strict";(self.webpackChunknvchad_site=self.webpackChunknvchad_site||[]).push([[458],{3905:function(e,n,t){t.d(n,{Zo:function(){return s},kt:function(){return d}});var i=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,i,a=function(e,n){if(null==e)return{};var t,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var u=i.createContext({}),c=function(e){var n=i.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},s=function(e){var n=c(e.components);return i.createElement(u.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},m=i.forwardRef((function(e,n){var t=e.components,a=e.mdxType,r=e.originalType,u=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),m=c(t),d=a,f=m["".concat(u,".").concat(d)]||m[d]||p[d]||r;return t?i.createElement(f,l(l({ref:n},s),{},{components:t})):i.createElement(f,l({ref:n},s))}));function d(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var r=t.length,l=new Array(r);l[0]=m;var o={};for(var u in n)hasOwnProperty.call(n,u)&&(o[u]=n[u]);o.originalType=e,o.mdxType="string"==typeof e?e:a,l[1]=o;for(var c=2;c<r;c++)l[c]=t[c];return i.createElement.apply(null,l)}return i.createElement.apply(null,t)}m.displayName="MDXCreateElement"},6634:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return o},contentTitle:function(){return u},metadata:function(){return c},toc:function(){return s},default:function(){return m}});var i=t(7462),a=t(3366),r=(t(7294),t(3905)),l=["components"],o={},u="Extras",c={unversionedId:"Extras",id:"Extras",isDocsHomePage:!1,title:"Extras",description:"- Plugins which seem awesome and cool , which enhance the experience while working in neovim and aren't added by default in nvchad will be added here.",source:"@site/docs/Extras.md",sourceDirName:".",slug:"/Extras",permalink:"/Extras",version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Features",permalink:"/features"},next:{title:"FAQ",permalink:"/faq"}},s=[{value:"neoscroll.nvim",id:"neoscrollnvim",children:[]},{value:"autosave.nvim",id:"autosavenvim",children:[]},{value:"Truezen.nvim",id:"truezennvim",children:[]},{value:"filetype.nvim",id:"filetypenvim",children:[]},{value:"stabilize.nvim",id:"stabilizenvim",children:[]},{value:"telescope-media-files.nvim",id:"telescope-media-filesnvim",children:[]}],p={toc:s};function m(e){var n=e.components,t=(0,a.Z)(e,l);return(0,r.kt)("wrapper",(0,i.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"extras"},"Extras"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Plugins which seem awesome and cool , which enhance the experience while working in neovim and aren't added by default in nvchad will be added here.")),(0,r.kt)("h2",{id:"neoscrollnvim"},"neoscroll.nvim"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Smooth scrolling neovim plugin written in lua"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/karb94/neoscroll.nvim"},"repo")),(0,r.kt)("li",{parentName:"ul"},"config :")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'  use {\n      "karb94/neoscroll.nvim",\n       opt = true,\n       config = function()\n          require("neoscroll").setup()\n       end,\n\n       -- lazy loading\n       setup = function()\n         require("core.utils").packer_lazy_load "neoscroll.nvim"\n       end,\n}\n')),(0,r.kt)("h2",{id:"autosavenvim"},"autosave.nvim"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Auto save files plugin written in lua"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/Pocco81/AutoSave.nvim"},"repo")),(0,r.kt)("li",{parentName:"ul"},"config :")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'   use {\n   "Pocco81/AutoSave.nvim",\n   config = function()\n      local autosave = require "autosave"\n\n      autosave.setup {\n         enabled = true,\n         execution_message = "autosaved at : " .. vim.fn.strftime "%H:%M:%S",\n         events = { "InsertLeave", "TextChanged" },\n         conditions = {\n            exists = true,\n            filetype_is_not = {},\n            modifiable = true,\n         },\n         clean_command_line_interval = 2500,\n         on_off_commands = true,\n         write_all_buffers = false,\n      }\n   end,\n}\n')),(0,r.kt)("h2",{id:"truezennvim"},"Truezen.nvim"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Clean and elegant distraction-free writing for NeoVim."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/Pocco81/TrueZen.nvim"},"repo")),(0,r.kt)("li",{parentName:"ul"},"config :")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'   use {\n      "Pocco81/TrueZen.nvim",\n      cmd = {\n         "TZAtaraxis",\n         "TZMinimalist",\n         "TZFocus",\n      },\n      config = function()\n          -- check https://github.com/Pocco81/TrueZen.nvim#setup-configuration (init.lua version)\n      end\n   }\n')),(0,r.kt)("h2",{id:"filetypenvim"},"filetype.nvim"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"A fast and lua alternative to ",(0,r.kt)("inlineCode",{parentName:"li"},"filetype.vim"),". It is ~175x faster than ",(0,r.kt)("inlineCode",{parentName:"li"},"filetype.vim")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/nathom/filetype.nvim"},"Repo")),(0,r.kt)("li",{parentName:"ul"},"config :")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'   use { "nathom/filetype.nvim" }\n')),(0,r.kt)("p",null,"Add the following to ",(0,r.kt)("inlineCode",{parentName:"p"},"lua/custom/init.lua")," :"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},"   -- Stop sourcing filetype.vim\n   vim.g.did_load_filetypes = 1\n")),(0,r.kt)("h2",{id:"stabilizenvim"},"stabilize.nvim"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Neovim plugin to stabilize window open/close events"),(0,r.kt)("li",{parentName:"ul"},"config : ")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'   use {\n    "luukvbaal/stabilize.nvim",\n    config = function() require("stabilize").setup() end\n   }\n')),(0,r.kt)("h2",{id:"telescope-media-filesnvim"},"telescope-media-files.nvim"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Telescope extension to preview media files using Ueberzug"),(0,r.kt)("li",{parentName:"ul"},"dependencies : ueberzug , ripgrep or fd"),(0,r.kt)("li",{parentName:"ul"},"config : ")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'   use {\n      "nvim-telescope/telescope-media-files.nvim",\n      after = "telescope.nvim",\n      config = function()\n         require("telescope").setup {\n            extensions = {\n               media_files = {\n                  filetypes = { "png", "webp", "jpg", "jpeg" },\n                  find_cmd = "rg", -- find command (defaults to `fd`)\n               },\n            },\n         }\n         require("telescope").load_extension "media_files"\n      end,\n   }\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"command : ")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-vim"},":Telescope media_files \n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"note: This works only on linux and that too mostly Xorg since ueberzug depends on xorg, if you use wayland then its not going to work mostly but it works with ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/siduck/st"},"st")," (knowing that xwayland is running in the bg) ")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"screenshot: "))),(0,r.kt)("img",{src:"https://raw.githubusercontent.com/siduck/dotfiles/all/rice%20flex/telmedia.png"}))}m.isMDXComponent=!0}}]);